package main

import (
	"bytes"
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"

	_ "github.com/alexbrainman/odbc" // ODBC-–¥—Ä–∞–∏ÃÜ–≤–µ—Ä –¥–ª—è MS Access
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
type SurveyResponse struct {
	Email   string `json:"email"`
	Address string `json:"address"`
	Score   int    `json:"score"`
	Level   string `json:"level"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Ollama
type OllamaRequest struct {
	Model  string `json:"model"`
	Prompt string `json:"prompt"`
	Stream bool   `json:"stream"`
}

var db *sql.DB

func main() {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MS Access
	dbPath := "dbPath := "C:\\Users\\Asus\\Desktop\\Moya papka\\fire.accdb"
	connStr := fmt.Sprintf("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=%s;", dbPath)

	var err error
	db, err = sql.Open("odbc", connStr)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err)
	}
	defer db.Close()

	if err = db.Ping(); err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î:", err)
	}

	createTable()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
	http.HandleFunc("/submitSurvey", handleSurvey)
	http.HandleFunc("/downloadAccess", downloadAccessHandler)
	http.HandleFunc("/generate", handleGenerate)
	http.HandleFunc("/fire-alert", handleFireAlert)
	http.HandleFunc("/ping", func(w http.ResponseWriter, r *http.Request) {
		enableCors(&w)
		fmt.Fprintln(w, "‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")
	})

	fmt.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	log.Fatal(http.ListenAndServe(":8080", nil))
}

// üìå –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
func createTable() {
	query := `
	CREATE TABLE IF NOT EXISTS SurveyResults (
		ID AUTOINCREMENT PRIMARY KEY,
		Email TEXT(255) NOT NULL UNIQUE,
		Address TEXT(255) NOT NULL,
		Score INT NOT NULL,
		[Level] TEXT(50) NOT NULL
	);`
	_, err := db.Exec(query)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:", err)
	} else {
		fmt.Println("‚úÖ –¢–∞–±–ª–∏—Ü–∞ SurveyResults —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
	}
}

// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç—Ä–µ–≤–æ–≥–∏ (–æ—Ç Raspberry Pi)
// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç—Ä–µ–≤–æ–≥–∏ (–æ—Ç Raspberry Pi)
func handleFireAlert(w http.ResponseWriter, r *http.Request) {
	enableCors(&w)

	if r.Method != http.MethodGet && r.Method != http.MethodPost {
		http.Error(w, `{"error": "–ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–µ—â–µÃà–Ω"}`, http.StatusMethodNotAllowed)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–∏ÃÜ –∞–¥—Ä–µ—Å –ø–æ–∂–∞—Ä–∞
	var lastAddress string
	query := "SELECT TOP 1 Address FROM SurveyResults ORDER BY ID DESC"
	err := db.QueryRow(query).Scan(&lastAddress)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î:", err)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-–æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode(map[string]string{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏–∑ –ë–î"})
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∂–∞—Ä –≤ –∫–æ–Ω—Å–æ–ª—å
	alertMessage := fmt.Sprintf("üö® –í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É: %s", lastAddress)
	fmt.Println(alertMessage)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-–æ—Ç–≤–µ—Ç
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{"address": lastAddress})
}

// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Access
func handleSurvey(w http.ResponseWriter, r *http.Request) {
	enableCors(&w)

	if r.Method == http.MethodOptions {
		w.WriteHeader(http.StatusOK)
		return
	}

	if r.Method != http.MethodPost {
		http.Error(w, "‚ùå –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–µ—â–µÃà–Ω", http.StatusMethodNotAllowed)
		return
	}

	var survey SurveyResponse
	err := json.NewDecoder(r.Body).Decode(&survey)
	if err != nil {
		http.Error(w, "‚ùå –û—à–∏–±–∫–∞ JSON", http.StatusBadRequest)
		return
	}

	if survey.Email == "" || survey.Address == "" {
		http.Error(w, "‚ùå –ü–æ–ª—è email –∏ address –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", http.StatusBadRequest)
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	if survey.Score > 75 {
		survey.Level = "–í—ã—Å–æ–∫–∏–∏ÃÜ —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
	} else if survey.Score > 50 {
		survey.Level = "–°—Ä–µ–¥–Ω–∏–∏ÃÜ —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
	} else {
		survey.Level = "–ù–∏–∑–∫–∏–∏ÃÜ —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ Email
	var existingEmail string
	checkQuery := "SELECT Email FROM SurveyResults WHERE Email = ?"
	err = db.QueryRow(checkQuery, survey.Email).Scan(&existingEmail)
	if err == nil {
		http.Error(w, "‚ö† Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", http.StatusConflict)
		return
	}

	query := "INSERT INTO SurveyResults (Email, Address, Score, [Level]) VALUES (?, ?, ?, ?)"
	_, err = db.Exec(query, survey.Email, survey.Address, survey.Score, survey.Level)
	if err != nil {
		http.Error(w, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î", http.StatusInternalServerError)
		log.Println("–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î:", err)
		return
	}

	fmt.Println("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:", survey.Email, survey.Score, survey.Level)
	w.WriteHeader(http.StatusOK)
	fmt.Fprintln(w, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
}

// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Access-—Ñ–∞–∏ÃÜ–ª–∞
func downloadAccessHandler(w http.ResponseWriter, r *http.Request) {
	enableCors(&w)

	filePath := "C:\\Users\\HP\\Desktop\\fire.accdb"

	if _, err := os.Stat(filePath); os.IsNotExist(err) {
		http.Error(w, "‚ùå –§–∞–∏ÃÜ–ª –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω", http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Disposition", "attachment; filename=fire.accdb")
	w.Header().Set("Content-Type", "application/vnd.ms-access")

	http.ServeFile(w, r, filePath)
}

// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ollama
func handleGenerate(w http.ResponseWriter, r *http.Request) {
	enableCors(&w)

	if r.Method == http.MethodOptions {
		w.WriteHeader(http.StatusOK)
		return
	}

	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–µ—â–µÃà–Ω", http.StatusMethodNotAllowed)
		return
	}

	var request OllamaRequest
	err := json.NewDecoder(r.Body).Decode(&request)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ JSON", http.StatusBadRequest)
		return
	}

	ollamaReq := OllamaRequest{
		Model:  "llama3",
		Prompt: request.Prompt,
		Stream: false,
	}

	reqBody, _ := json.Marshal(ollamaReq)

	resp, err := http.Post("http://localhost:11434/api/generate", "application/json", bytes.NewBuffer(reqBody))
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama", http.StatusInternalServerError)
		return
	}
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)

	w.Header().Set("Content-Type", "application/json")
	w.Write(body)
}

// üìå –í–∫–ª—é—á–∞–µ–º CORS
func enableCors(w *http.ResponseWriter) {
	(*w).Header().Set("Access-Control-Allow-Origin", "*")
	(*w).Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
	(*w).Header().Set("Access-Control-Allow-Headers", "Content-Type")
}

